//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Program.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ProgramParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, INPUT=7, OUTPUT=8, WASTE=9, 
		MERGE=10, SPLIT=11, MIX=12, TEMP=13, SENSE=14, NEWLINE=15, STRING=16, 
		INT=17;
	public const int
		RULE_program = 0, RULE_dropletname = 1, RULE_number = 2, RULE_shape = 3, 
		RULE_sensor = 4, RULE_command = 5;
	public static readonly string[] ruleNames = {
		"program", "dropletname", "number", "shape", "sensor", "command"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'square'", "'circle'", "'size'", "'rgb'", "' '", "'input'", 
		"'output'", "'waste'", "'merge'", "'split'", "'mix'", "'temp'", "'sense'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "INPUT", "OUTPUT", "WASTE", 
		"MERGE", "SPLIT", "MIX", "TEMP", "SENSE", "NEWLINE", "STRING", "INT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Program.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ProgramParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ProgramParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ProgramParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(ProgramParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(ProgramParser.NEWLINE, i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProgramListener typedListener = listener as IProgramListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProgramListener typedListener = listener as IProgramListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 17;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 12;
				command();
				State = 13;
				Match(T__0);
				State = 15;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NEWLINE) {
					{
					State = 14;
					Match(NEWLINE);
					}
				}

				}
				}
				State = 19;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 32640L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropletnameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ProgramParser.STRING, 0); }
		public DropletnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropletname; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProgramListener typedListener = listener as IProgramListener;
			if (typedListener != null) typedListener.EnterDropletname(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProgramListener typedListener = listener as IProgramListener;
			if (typedListener != null) typedListener.ExitDropletname(this);
		}
	}

	[RuleVersion(0)]
	public DropletnameContext dropletname() {
		DropletnameContext _localctx = new DropletnameContext(Context, State);
		EnterRule(_localctx, 2, RULE_dropletname);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(ProgramParser.INT, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProgramListener typedListener = listener as IProgramListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProgramListener typedListener = listener as IProgramListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 4, RULE_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 23;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShapeContext : ParserRuleContext {
		public ShapeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shape; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProgramListener typedListener = listener as IProgramListener;
			if (typedListener != null) typedListener.EnterShape(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProgramListener typedListener = listener as IProgramListener;
			if (typedListener != null) typedListener.ExitShape(this);
		}
	}

	[RuleVersion(0)]
	public ShapeContext shape() {
		ShapeContext _localctx = new ShapeContext(Context, State);
		EnterRule(_localctx, 6, RULE_shape);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			_la = TokenStream.LA(1);
			if ( !(_la==T__1 || _la==T__2) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SensorContext : ParserRuleContext {
		public SensorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sensor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProgramListener typedListener = listener as IProgramListener;
			if (typedListener != null) typedListener.EnterSensor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProgramListener typedListener = listener as IProgramListener;
			if (typedListener != null) typedListener.ExitSensor(this);
		}
	}

	[RuleVersion(0)]
	public SensorContext sensor() {
		SensorContext _localctx = new SensorContext(Context, State);
		EnterRule(_localctx, 8, RULE_sensor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			_la = TokenStream.LA(1);
			if ( !(_la==T__3 || _la==T__4) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPUT() { return GetToken(ProgramParser.INPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DropletnameContext[] dropletname() {
			return GetRuleContexts<DropletnameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropletnameContext dropletname(int i) {
			return GetRuleContext<DropletnameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTPUT() { return GetToken(ProgramParser.OUTPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WASTE() { return GetToken(ProgramParser.WASTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(ProgramParser.MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPLIT() { return GetToken(ProgramParser.SPLIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIX() { return GetToken(ProgramParser.MIX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShapeContext shape() {
			return GetRuleContext<ShapeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(ProgramParser.TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SENSE() { return GetToken(ProgramParser.SENSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SensorContext sensor() {
			return GetRuleContext<SensorContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProgramListener typedListener = listener as IProgramListener;
			if (typedListener != null) typedListener.EnterCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProgramListener typedListener = listener as IProgramListener;
			if (typedListener != null) typedListener.ExitCommand(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 10, RULE_command);
		int _la;
		try {
			State = 84;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INPUT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 29;
				Match(INPUT);
				State = 30;
				Match(T__5);
				State = 31;
				dropletname();
				}
				break;
			case OUTPUT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 32;
				Match(OUTPUT);
				State = 33;
				Match(T__5);
				State = 34;
				dropletname();
				}
				break;
			case WASTE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 35;
				Match(WASTE);
				State = 36;
				Match(T__5);
				State = 37;
				dropletname();
				}
				break;
			case MERGE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 38;
				Match(MERGE);
				State = 39;
				Match(T__5);
				State = 40;
				dropletname();
				State = 41;
				Match(T__5);
				State = 42;
				dropletname();
				State = 43;
				Match(T__5);
				State = 44;
				dropletname();
				State = 49;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__5) {
					{
					{
					State = 45;
					Match(T__5);
					State = 46;
					dropletname();
					}
					}
					State = 51;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case SPLIT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 52;
				Match(SPLIT);
				State = 53;
				Match(T__5);
				State = 54;
				dropletname();
				State = 55;
				Match(T__5);
				State = 56;
				dropletname();
				State = 57;
				Match(T__5);
				State = 58;
				dropletname();
				State = 63;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__5) {
					{
					{
					State = 59;
					Match(T__5);
					State = 60;
					dropletname();
					}
					}
					State = 65;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case MIX:
				EnterOuterAlt(_localctx, 6);
				{
				State = 66;
				Match(MIX);
				State = 67;
				Match(T__5);
				State = 68;
				dropletname();
				State = 69;
				Match(T__5);
				State = 70;
				shape();
				}
				break;
			case TEMP:
				EnterOuterAlt(_localctx, 7);
				{
				State = 72;
				Match(TEMP);
				State = 73;
				Match(T__5);
				State = 74;
				dropletname();
				State = 75;
				Match(T__5);
				State = 76;
				number();
				}
				break;
			case SENSE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 78;
				Match(SENSE);
				State = 79;
				Match(T__5);
				State = 80;
				dropletname();
				State = 81;
				Match(T__5);
				State = 82;
				sensor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,17,87,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,1,0,1,0,1,0,
		3,0,16,8,0,4,0,18,8,0,11,0,12,0,19,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,5,
		5,48,8,5,10,5,12,5,51,9,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,62,8,
		5,10,5,12,5,65,9,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,3,5,85,8,5,1,5,0,0,6,0,2,4,6,8,10,0,2,1,0,2,3,1,0,
		4,5,91,0,17,1,0,0,0,2,21,1,0,0,0,4,23,1,0,0,0,6,25,1,0,0,0,8,27,1,0,0,
		0,10,84,1,0,0,0,12,13,3,10,5,0,13,15,5,1,0,0,14,16,5,15,0,0,15,14,1,0,
		0,0,15,16,1,0,0,0,16,18,1,0,0,0,17,12,1,0,0,0,18,19,1,0,0,0,19,17,1,0,
		0,0,19,20,1,0,0,0,20,1,1,0,0,0,21,22,5,16,0,0,22,3,1,0,0,0,23,24,5,17,
		0,0,24,5,1,0,0,0,25,26,7,0,0,0,26,7,1,0,0,0,27,28,7,1,0,0,28,9,1,0,0,0,
		29,30,5,7,0,0,30,31,5,6,0,0,31,85,3,2,1,0,32,33,5,8,0,0,33,34,5,6,0,0,
		34,85,3,2,1,0,35,36,5,9,0,0,36,37,5,6,0,0,37,85,3,2,1,0,38,39,5,10,0,0,
		39,40,5,6,0,0,40,41,3,2,1,0,41,42,5,6,0,0,42,43,3,2,1,0,43,44,5,6,0,0,
		44,49,3,2,1,0,45,46,5,6,0,0,46,48,3,2,1,0,47,45,1,0,0,0,48,51,1,0,0,0,
		49,47,1,0,0,0,49,50,1,0,0,0,50,85,1,0,0,0,51,49,1,0,0,0,52,53,5,11,0,0,
		53,54,5,6,0,0,54,55,3,2,1,0,55,56,5,6,0,0,56,57,3,2,1,0,57,58,5,6,0,0,
		58,63,3,2,1,0,59,60,5,6,0,0,60,62,3,2,1,0,61,59,1,0,0,0,62,65,1,0,0,0,
		63,61,1,0,0,0,63,64,1,0,0,0,64,85,1,0,0,0,65,63,1,0,0,0,66,67,5,12,0,0,
		67,68,5,6,0,0,68,69,3,2,1,0,69,70,5,6,0,0,70,71,3,6,3,0,71,85,1,0,0,0,
		72,73,5,13,0,0,73,74,5,6,0,0,74,75,3,2,1,0,75,76,5,6,0,0,76,77,3,4,2,0,
		77,85,1,0,0,0,78,79,5,14,0,0,79,80,5,6,0,0,80,81,3,2,1,0,81,82,5,6,0,0,
		82,83,3,8,4,0,83,85,1,0,0,0,84,29,1,0,0,0,84,32,1,0,0,0,84,35,1,0,0,0,
		84,38,1,0,0,0,84,52,1,0,0,0,84,66,1,0,0,0,84,72,1,0,0,0,84,78,1,0,0,0,
		85,11,1,0,0,0,5,15,19,49,63,84
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
