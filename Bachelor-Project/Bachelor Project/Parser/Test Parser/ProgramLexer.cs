//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Program.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ProgramLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, NEWLINE=35, STRING=36, INT=37;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
		"T__33", "NEWLINE", "STRING", "INT"
	};


	public ProgramLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ProgramLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "';'", "'square'", "'Square'", "'circle'", "'Circle'", "' '", "'input'", 
		"'in'", "'Input'", "'In'", "'output'", "'out'", "'Output'", "'Out'", "'waste'", 
		"'Waste'", "'contam'", "'contaminate'", "'Contam'", "'Contaminate'", "'merge'", 
		"'Merge'", "'split'", "'Split'", "'mix'", "'Mix'", "'temp'", "'heat'", 
		"'Temp'", "'Heat'", "'sense'", "'Sense'", "'wait'", "'Wait'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "NEWLINE", 
		"STRING", "INT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Program.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ProgramLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,37,287,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,
		5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,
		1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,
		12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,
		14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
		17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,
		18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
		19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,
		21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,
		24,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,
		27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,
		30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,
		32,1,32,1,33,1,33,1,33,1,33,1,33,1,34,4,34,273,8,34,11,34,12,34,274,1,
		35,1,35,4,35,279,8,35,11,35,12,35,280,1,36,4,36,284,8,36,11,36,12,36,285,
		0,0,37,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
		27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
		51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,
		1,0,4,2,0,10,10,13,13,2,0,65,90,97,122,3,0,48,57,65,90,97,122,1,0,48,57,
		289,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
		0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
		0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
		1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
		0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,
		1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,
		0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,1,75,1,0,0,0,3,77,
		1,0,0,0,5,84,1,0,0,0,7,91,1,0,0,0,9,98,1,0,0,0,11,105,1,0,0,0,13,107,1,
		0,0,0,15,113,1,0,0,0,17,116,1,0,0,0,19,122,1,0,0,0,21,125,1,0,0,0,23,132,
		1,0,0,0,25,136,1,0,0,0,27,143,1,0,0,0,29,147,1,0,0,0,31,153,1,0,0,0,33,
		159,1,0,0,0,35,166,1,0,0,0,37,178,1,0,0,0,39,185,1,0,0,0,41,197,1,0,0,
		0,43,203,1,0,0,0,45,209,1,0,0,0,47,215,1,0,0,0,49,221,1,0,0,0,51,225,1,
		0,0,0,53,229,1,0,0,0,55,234,1,0,0,0,57,239,1,0,0,0,59,244,1,0,0,0,61,249,
		1,0,0,0,63,255,1,0,0,0,65,261,1,0,0,0,67,266,1,0,0,0,69,272,1,0,0,0,71,
		276,1,0,0,0,73,283,1,0,0,0,75,76,5,59,0,0,76,2,1,0,0,0,77,78,5,115,0,0,
		78,79,5,113,0,0,79,80,5,117,0,0,80,81,5,97,0,0,81,82,5,114,0,0,82,83,5,
		101,0,0,83,4,1,0,0,0,84,85,5,83,0,0,85,86,5,113,0,0,86,87,5,117,0,0,87,
		88,5,97,0,0,88,89,5,114,0,0,89,90,5,101,0,0,90,6,1,0,0,0,91,92,5,99,0,
		0,92,93,5,105,0,0,93,94,5,114,0,0,94,95,5,99,0,0,95,96,5,108,0,0,96,97,
		5,101,0,0,97,8,1,0,0,0,98,99,5,67,0,0,99,100,5,105,0,0,100,101,5,114,0,
		0,101,102,5,99,0,0,102,103,5,108,0,0,103,104,5,101,0,0,104,10,1,0,0,0,
		105,106,5,32,0,0,106,12,1,0,0,0,107,108,5,105,0,0,108,109,5,110,0,0,109,
		110,5,112,0,0,110,111,5,117,0,0,111,112,5,116,0,0,112,14,1,0,0,0,113,114,
		5,105,0,0,114,115,5,110,0,0,115,16,1,0,0,0,116,117,5,73,0,0,117,118,5,
		110,0,0,118,119,5,112,0,0,119,120,5,117,0,0,120,121,5,116,0,0,121,18,1,
		0,0,0,122,123,5,73,0,0,123,124,5,110,0,0,124,20,1,0,0,0,125,126,5,111,
		0,0,126,127,5,117,0,0,127,128,5,116,0,0,128,129,5,112,0,0,129,130,5,117,
		0,0,130,131,5,116,0,0,131,22,1,0,0,0,132,133,5,111,0,0,133,134,5,117,0,
		0,134,135,5,116,0,0,135,24,1,0,0,0,136,137,5,79,0,0,137,138,5,117,0,0,
		138,139,5,116,0,0,139,140,5,112,0,0,140,141,5,117,0,0,141,142,5,116,0,
		0,142,26,1,0,0,0,143,144,5,79,0,0,144,145,5,117,0,0,145,146,5,116,0,0,
		146,28,1,0,0,0,147,148,5,119,0,0,148,149,5,97,0,0,149,150,5,115,0,0,150,
		151,5,116,0,0,151,152,5,101,0,0,152,30,1,0,0,0,153,154,5,87,0,0,154,155,
		5,97,0,0,155,156,5,115,0,0,156,157,5,116,0,0,157,158,5,101,0,0,158,32,
		1,0,0,0,159,160,5,99,0,0,160,161,5,111,0,0,161,162,5,110,0,0,162,163,5,
		116,0,0,163,164,5,97,0,0,164,165,5,109,0,0,165,34,1,0,0,0,166,167,5,99,
		0,0,167,168,5,111,0,0,168,169,5,110,0,0,169,170,5,116,0,0,170,171,5,97,
		0,0,171,172,5,109,0,0,172,173,5,105,0,0,173,174,5,110,0,0,174,175,5,97,
		0,0,175,176,5,116,0,0,176,177,5,101,0,0,177,36,1,0,0,0,178,179,5,67,0,
		0,179,180,5,111,0,0,180,181,5,110,0,0,181,182,5,116,0,0,182,183,5,97,0,
		0,183,184,5,109,0,0,184,38,1,0,0,0,185,186,5,67,0,0,186,187,5,111,0,0,
		187,188,5,110,0,0,188,189,5,116,0,0,189,190,5,97,0,0,190,191,5,109,0,0,
		191,192,5,105,0,0,192,193,5,110,0,0,193,194,5,97,0,0,194,195,5,116,0,0,
		195,196,5,101,0,0,196,40,1,0,0,0,197,198,5,109,0,0,198,199,5,101,0,0,199,
		200,5,114,0,0,200,201,5,103,0,0,201,202,5,101,0,0,202,42,1,0,0,0,203,204,
		5,77,0,0,204,205,5,101,0,0,205,206,5,114,0,0,206,207,5,103,0,0,207,208,
		5,101,0,0,208,44,1,0,0,0,209,210,5,115,0,0,210,211,5,112,0,0,211,212,5,
		108,0,0,212,213,5,105,0,0,213,214,5,116,0,0,214,46,1,0,0,0,215,216,5,83,
		0,0,216,217,5,112,0,0,217,218,5,108,0,0,218,219,5,105,0,0,219,220,5,116,
		0,0,220,48,1,0,0,0,221,222,5,109,0,0,222,223,5,105,0,0,223,224,5,120,0,
		0,224,50,1,0,0,0,225,226,5,77,0,0,226,227,5,105,0,0,227,228,5,120,0,0,
		228,52,1,0,0,0,229,230,5,116,0,0,230,231,5,101,0,0,231,232,5,109,0,0,232,
		233,5,112,0,0,233,54,1,0,0,0,234,235,5,104,0,0,235,236,5,101,0,0,236,237,
		5,97,0,0,237,238,5,116,0,0,238,56,1,0,0,0,239,240,5,84,0,0,240,241,5,101,
		0,0,241,242,5,109,0,0,242,243,5,112,0,0,243,58,1,0,0,0,244,245,5,72,0,
		0,245,246,5,101,0,0,246,247,5,97,0,0,247,248,5,116,0,0,248,60,1,0,0,0,
		249,250,5,115,0,0,250,251,5,101,0,0,251,252,5,110,0,0,252,253,5,115,0,
		0,253,254,5,101,0,0,254,62,1,0,0,0,255,256,5,83,0,0,256,257,5,101,0,0,
		257,258,5,110,0,0,258,259,5,115,0,0,259,260,5,101,0,0,260,64,1,0,0,0,261,
		262,5,119,0,0,262,263,5,97,0,0,263,264,5,105,0,0,264,265,5,116,0,0,265,
		66,1,0,0,0,266,267,5,87,0,0,267,268,5,97,0,0,268,269,5,105,0,0,269,270,
		5,116,0,0,270,68,1,0,0,0,271,273,7,0,0,0,272,271,1,0,0,0,273,274,1,0,0,
		0,274,272,1,0,0,0,274,275,1,0,0,0,275,70,1,0,0,0,276,278,7,1,0,0,277,279,
		7,2,0,0,278,277,1,0,0,0,279,280,1,0,0,0,280,278,1,0,0,0,280,281,1,0,0,
		0,281,72,1,0,0,0,282,284,7,3,0,0,283,282,1,0,0,0,284,285,1,0,0,0,285,283,
		1,0,0,0,285,286,1,0,0,0,286,74,1,0,0,0,4,0,274,280,285,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
