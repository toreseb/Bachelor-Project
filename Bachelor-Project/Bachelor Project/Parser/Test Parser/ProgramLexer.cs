//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Program.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ProgramLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, INPUT=7, OUTPUT=8, WASTE=9, 
		CONTAMINATE=10, MERGE=11, SPLIT=12, MIX=13, TEMP=14, SENSE=15, NEWLINE=16, 
		STRING=17, INT=18;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "INPUT", "OUTPUT", "WASTE", 
		"CONTAMINATE", "MERGE", "SPLIT", "MIX", "TEMP", "SENSE", "NEWLINE", "STRING", 
		"INT"
	};


	public ProgramLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ProgramLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "';'", "'square'", "'circle'", "'size'", "'rgb'", "' '", "'input'", 
		"'output'", "'waste'", "'contam'", "'merge'", "'split'", "'mix'", "'temp'", 
		"'sense'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "INPUT", "OUTPUT", "WASTE", 
		"CONTAMINATE", "MERGE", "SPLIT", "MIX", "TEMP", "SENSE", "NEWLINE", "STRING", 
		"INT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Program.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ProgramLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,18,133,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,
		5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,
		1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,
		1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,
		1,14,1,14,1,14,1,14,1,14,1,14,1,15,4,15,119,8,15,11,15,12,15,120,1,16,
		1,16,4,16,125,8,16,11,16,12,16,126,1,17,4,17,130,8,17,11,17,12,17,131,
		0,0,18,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
		27,14,29,15,31,16,33,17,35,18,1,0,4,2,0,10,10,13,13,2,0,65,90,97,122,3,
		0,48,57,65,90,97,122,1,0,48,57,135,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
		0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,
		0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
		0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,1,37,1,0,0,0,3,39,
		1,0,0,0,5,46,1,0,0,0,7,53,1,0,0,0,9,58,1,0,0,0,11,62,1,0,0,0,13,64,1,0,
		0,0,15,70,1,0,0,0,17,77,1,0,0,0,19,83,1,0,0,0,21,90,1,0,0,0,23,96,1,0,
		0,0,25,102,1,0,0,0,27,106,1,0,0,0,29,111,1,0,0,0,31,118,1,0,0,0,33,122,
		1,0,0,0,35,129,1,0,0,0,37,38,5,59,0,0,38,2,1,0,0,0,39,40,5,115,0,0,40,
		41,5,113,0,0,41,42,5,117,0,0,42,43,5,97,0,0,43,44,5,114,0,0,44,45,5,101,
		0,0,45,4,1,0,0,0,46,47,5,99,0,0,47,48,5,105,0,0,48,49,5,114,0,0,49,50,
		5,99,0,0,50,51,5,108,0,0,51,52,5,101,0,0,52,6,1,0,0,0,53,54,5,115,0,0,
		54,55,5,105,0,0,55,56,5,122,0,0,56,57,5,101,0,0,57,8,1,0,0,0,58,59,5,114,
		0,0,59,60,5,103,0,0,60,61,5,98,0,0,61,10,1,0,0,0,62,63,5,32,0,0,63,12,
		1,0,0,0,64,65,5,105,0,0,65,66,5,110,0,0,66,67,5,112,0,0,67,68,5,117,0,
		0,68,69,5,116,0,0,69,14,1,0,0,0,70,71,5,111,0,0,71,72,5,117,0,0,72,73,
		5,116,0,0,73,74,5,112,0,0,74,75,5,117,0,0,75,76,5,116,0,0,76,16,1,0,0,
		0,77,78,5,119,0,0,78,79,5,97,0,0,79,80,5,115,0,0,80,81,5,116,0,0,81,82,
		5,101,0,0,82,18,1,0,0,0,83,84,5,99,0,0,84,85,5,111,0,0,85,86,5,110,0,0,
		86,87,5,116,0,0,87,88,5,97,0,0,88,89,5,109,0,0,89,20,1,0,0,0,90,91,5,109,
		0,0,91,92,5,101,0,0,92,93,5,114,0,0,93,94,5,103,0,0,94,95,5,101,0,0,95,
		22,1,0,0,0,96,97,5,115,0,0,97,98,5,112,0,0,98,99,5,108,0,0,99,100,5,105,
		0,0,100,101,5,116,0,0,101,24,1,0,0,0,102,103,5,109,0,0,103,104,5,105,0,
		0,104,105,5,120,0,0,105,26,1,0,0,0,106,107,5,116,0,0,107,108,5,101,0,0,
		108,109,5,109,0,0,109,110,5,112,0,0,110,28,1,0,0,0,111,112,5,115,0,0,112,
		113,5,101,0,0,113,114,5,110,0,0,114,115,5,115,0,0,115,116,5,101,0,0,116,
		30,1,0,0,0,117,119,7,0,0,0,118,117,1,0,0,0,119,120,1,0,0,0,120,118,1,0,
		0,0,120,121,1,0,0,0,121,32,1,0,0,0,122,124,7,1,0,0,123,125,7,2,0,0,124,
		123,1,0,0,0,125,126,1,0,0,0,126,124,1,0,0,0,126,127,1,0,0,0,127,34,1,0,
		0,0,128,130,7,3,0,0,129,128,1,0,0,0,130,131,1,0,0,0,131,129,1,0,0,0,131,
		132,1,0,0,0,132,36,1,0,0,0,4,0,120,126,131,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
